# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UEasPeh6X2nU1e17NgfIEo3Oz7aIg7Uk
"""

import streamlit as st
import pickle
import numpy as np

# ----------------- Load Models -----------------
diabetes_model = pickle.load(open("diabetes_model.sav", "rb"))
heart_model = pickle.load(open("heart_disease_model.sav", "rb"))
parkinsons_model = pickle.load(open("parkinsons_model.sav", "rb"))



# ----------------- App UI -----------------
st.set_page_config(page_title="Health Prediction App", page_icon="‚ù§Ô∏è", layout="centered")

st.title("üåç Multiple Disease Prediction System")
st.markdown("### ü©∫ *'Your Health, Our Priority'*")
st.write("Welcome to the **Health Prediction Web App**. Select a disease from the menu below and enter your details to get predictions instantly.")

# Sidebar Menu
app_choice = st.sidebar.selectbox("üîé Choose a Prediction App",
                                  ["üè• Diabetes Prediction",
                                   "‚ù§Ô∏è Heart Disease Prediction",
                                   "üß† Parkinson's Disease Prediction"])

# ----------------- Diabetes -----------------
if app_choice == "üè• Diabetes Prediction":
    st.header("Diabetes Prediction")
    st.write("Enter the following details:")

    col1, col2 = st.columns(2)

    with col1:
        Pregnancies = st.number_input("Number of Pregnancies", min_value=0, max_value=20, step=1)
        Glucose = st.number_input("Glucose Level", min_value=0)
        BloodPressure = st.number_input("Blood Pressure", min_value=0)
        SkinThickness = st.number_input("Skin Thickness", min_value=0)
    with col2:
        Insulin = st.number_input("Insulin Level", min_value=0)
        BMI = st.number_input("BMI", min_value=0.0, format="%.2f")
        DiabetesPedigreeFunction = st.number_input("Diabetes Pedigree Function", min_value=0.0, format="%.3f")
        Age = st.number_input("Age", min_value=0, max_value=120)

    if st.button("üîÆ Predict Diabetes"):
        user_input = np.array([[Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI,
                                DiabetesPedigreeFunction, Age]])
        prediction = diabetes_model.predict(user_input)

        if prediction[0] == 1:
            st.error("‚ö†Ô∏è The person is likely to have **Diabetes**.")
        else:
            st.success("‚úÖ The person is **Diabetes-Free**.")

# ----------------- Heart Disease -----------------
elif app_choice == "‚ù§Ô∏è Heart Disease Prediction":
    st.header("Heart Disease Prediction")
    st.write("Enter the following details:")

    col1, col2 = st.columns(2)

    with col1:
        Age = st.number_input("Age", min_value=1, max_value=120)
        Sex = st.selectbox("Sex", [0, 1])
        ChestPainType = st.selectbox("Chest Pain Type", [0, 1, 2, 3])
        RestingBP = st.number_input("Resting Blood Pressure", min_value=0)
        Cholesterol = st.number_input("Serum Cholesterol", min_value=0)
        FastingBS = st.selectbox("Fasting Blood Sugar > 120 mg/dl", [0, 1])
    with col2:
        RestingECG = st.selectbox("Resting ECG", [0, 1])
        MaxHR = st.number_input("Max Heart Rate Achieved", min_value=0)
        ExerciseAngina = st.selectbox("Exercise Induced Angina", [0, 1])
        Oldpeak = st.number_input("ST Depression", format="%.1f")
        ST_Slope = st.selectbox("ST Segment Slope", [0, 1, 2])
        MajorVessels = st.number_input("Number of Major Vessels Colored", min_value=0, max_value=3)
        Thal = st.selectbox("Thalassemia Type", [0, 1, 2, 3])

    if st.button("üîÆ Predict Heart Disease"):
        user_input = np.array([[Age, Sex, ChestPainType, RestingBP, Cholesterol,
                                FastingBS, RestingECG, MaxHR, ExerciseAngina,
                                Oldpeak, ST_Slope, MajorVessels, Thal]])
        prediction = heart_model.predict(user_input)

        if prediction[0] == 1:
            st.error("‚ö†Ô∏è The person is likely to have **Heart Disease**.")
        else:
            st.success("‚úÖ The person is **Heart-Healthy**.")

# ----------------- Parkinson's -----------------
elif app_choice == "üß† Parkinson's Disease Prediction":
    st.header("Parkinson's Disease Prediction")
    st.write("Enter the following details:")

    col1, col2 = st.columns(2)

    with col1:
        Fo = st.number_input("MDVP:Fo(Hz)")
        Fhi = st.number_input("MDVP:Fhi(Hz)")
        Flo = st.number_input("MDVP:Flo(Hz)")
        Jitter_percent = st.number_input("MDVP:Jitter(%)")
        Jitter_abs = st.number_input("MDVP:Jitter(Abs)")
        RAP = st.number_input("MDVP:RAP")
        PPQ = st.number_input("MDVP:PPQ")
        DDP = st.number_input("Jitter:DDP")
        Shimmer = st.number_input("MDVP:Shimmer")
        Shimmer_dB = st.number_input("MDVP:Shimmer(dB)")
        APQ3 = st.number_input("Shimmer:APQ3")
    with col2:
        APQ5 = st.number_input("Shimmer:APQ5")
        APQ = st.number_input("MDVP:APQ")
        DDA = st.number_input("Shimmer:DDA")
        NHR = st.number_input("NHR")
        HNR = st.number_input("HNR")
        RPDE = st.number_input("RPDE")
        DFA = st.number_input("DFA")
        spread1 = st.number_input("Spread1")
        spread2 = st.number_input("Spread2")
        D2 = st.number_input("D2")
        PPE = st.number_input("PPE")

    if st.button("üîÆ Predict Parkinson's"):
        user_input = np.array([[Fo, Fhi, Flo, Jitter_percent, Jitter_abs, RAP, PPQ, DDP,
                                Shimmer, Shimmer_dB, APQ3, APQ5, APQ, DDA, NHR, HNR,
                                RPDE, DFA, spread1, spread2, D2, PPE]])
        prediction = parkinsons_model.predict(user_input)

        if prediction[0] == 1:
            st.error("‚ö†Ô∏è The person is likely to have **Parkinson's Disease**.")
        else:
            st.success("‚úÖ The person is **Parkinson's-Free**.")